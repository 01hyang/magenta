#!/bin/bash

# Copyright 2016 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

# This script downloads the Magenta toolchain as prebuilts from Google Storage.

# This script is expected to be executed by Jiri as a runhook, or by individual
# developers who want to grab the latest prebuilts.  It takes no arguments, will
# download the latest version of the Magenta toolchain, install it in the
# prebuilt/downloads directory, and update prebuilt/config.mk with the toolchain
# prefix (so you shouldn't have to set PATH or anything yourself).

set -e

readonly GS_BUCKET="https://fuchsia-build.storage.googleapis.com/magenta"
readonly OS="$(uname)"
readonly HOSTARCH="$(uname -m)"

# We assume the following directory structure:
# ./magenta/scripts
# ./magenta/prebuilt
readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly MAGENTA_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
readonly PREBUILTS_DIR="$(cd "${MAGENTA_ROOT}/prebuilt" && pwd)"

# Install prebuilts into a .gitignore'd directory to keep things clean
mkdir -p "${PREBUILTS_DIR}/downloads"
readonly INSTALL_DIR="$(cd "${PREBUILTS_DIR}/downloads" && pwd)"

# Download the tools if they don't already exist, or if their versions are out of date.
TOOLCHAIN_MAKEVARS=()
function downloadToolchain() {
  local target="${1}"

  # These are files and paths we expect to already exist.
  local common_path="toolchain/${target}/${OS}-${HOSTARCH}"
  if [ ! -d "${common_path}" ]; then
    echo "Path ${common_path} does not exist."
    echo "Your operating system is probably not supported, aborting."
    exit 1
  fi
  local required_version="$(cat "${PREBUILTS_DIR}/versions/${common_path}/version.sha" )"
  local prebuilt_url="${GS_BUCKET}/${common_path}/${required_version}"

  # These are files and paths we control in this script.
  local tool_name="${target}-${OS}-${HOSTARCH}"
  local stamp_path="${INSTALL_DIR}/${tool_name}.stamp"
  local tool_path="${INSTALL_DIR}/${tool_name}.tar.bz2"

  # The stamp file contains the SHA of the last version we downloaded.  If it doesn't
  # match the SHA found in the version file, download and unpack the new one.
  cd ${INSTALL_DIR}
  if [[ ! -f "${stamp_path}" || "${required_version}" != "$(cat ${stamp_path})" ]]; then
    rm -f -- "${tool_path}"
    echo "Downloading ${prebuilt_url}"
    curl -continue-at=- --location --output "${tool_path}" "${prebuilt_url}"
    echo "Unpacking ${tool_path}"
    bzip2 -dc "${tool_path}" | tar -x
    echo "${required_version}" > "${stamp_path}"
  fi

  # Record the locations of the various toolchains.  Note that since it's annoying to figure
  # out the untar'ed directory name, we label the tarball with it in the upload-toolchain script.
  local tarball_root="$(tar --test-label -jf "${tool_path}")"
  case "${target}" in
    "arm-eabi")
      TOOLCHAIN_MAKEVARS+=("ARCH_arm_TOOLCHAIN_PREFIX = ${INSTALL_DIR}/${tarball_root}/bin/${target}-")
      ;;
    "aarch64-elf")
      TOOLCHAIN_MAKEVARS+=("ARCH_arm64_TOOLCHAIN_PREFIX = ${INSTALL_DIR}/${tarball_root}/bin/${target}-")
      ;;
    "x86_64-elf")
      TOOLCHAIN_MAKEVARS+=("ARCH_x86_64_TOOLCHAIN_PREFIX = ${INSTALL_DIR}/${tarball_root}/bin/${target}-")
      ;;
  esac
}

# We want the toolchains for all target types.
readonly TARGETS=("arm-eabi" "x86_64-elf" "aarch64-elf")
for target in "${TARGETS[@]}"; do
  downloadToolchain "${target}"
done

# Update prebuilt/config.mk to point at the toolchains we just installed.
readonly ENV_MK="${PREBUILTS_DIR}/config.mk"
if [[ -f "${ENV_MK}" ]]; then
  sed -i.bak '/ARCH_.*_TOOLCHAIN_PREFIX/d' "${ENV_MK}"
fi
for line in "${TOOLCHAIN_MAKEVARS[@]}"; do
  echo $line >> "${ENV_MK}"
done
